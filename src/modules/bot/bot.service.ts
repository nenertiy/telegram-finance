import { SheetsService } from './../sheets/sheets.service';
import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import { categoryButtons, moneyButtons } from './bot.buttons';

@Injectable()
export class BotService {
  private userSessions: Map<
    number,
    {
      currency?: string;
      category?: string;
      step: 'currency' | 'category' | 'amount';
    }
  > = new Map();

  constructor(private readonly sheetsService: SheetsService) {}

  async onStart(ctx: Context) {
    await ctx.reply(
      `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ë–æ—Ç–∞!</b>

<i>üí° –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤ –ø—Ä—è–º–æ –≤ Google –¢–∞–±–ª–∏—Ü–µ.</i>
  
<b>üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
<b>/init</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å  
<b>/add</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é  
<b>/clear</b> ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
  
<i>üßæ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç —Å–∞–º!</i>`,
      { parse_mode: 'HTML' },
    );
  }

  async onInit(ctx: Context) {
    try {
      const userId = ctx.from.id;
      this.userSessions.set(userId, { step: 'currency', category: 'init' });
      await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: USD EUR RUB (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 200 300)',
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets.',
      );
    }
  }

  async onAdd(ctx: Context) {
    const userId = ctx.from.id;

    this.userSessions.set(userId, { step: 'currency' });

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:', moneyButtons());
  }

  async onClear(ctx: Context) {
    const userId = ctx.from.id;
    this.userSessions.delete(userId);
    await ctx.reply('–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã.');
  }

  async handleCurrencySelection(ctx: Context, currency: string) {
    const { userId, session } = await this.checkSession(ctx);

    session.currency = currency;
    session.step = 'category';
    this.userSessions.set(userId, session);

    await ctx.reply(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${currency.toUpperCase()}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`,
      categoryButtons(),
    );
  }

  async handleCategorySelection(ctx: Context, category: string) {
    const { userId, session } = await this.checkSession(ctx);

    session.category = category;
    session.step = 'amount';
    this.userSessions.set(userId, session);

    await ctx.reply(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}". –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"`,
    );
  }

  async handleTextMessage(ctx: Context<any>) {
    const { userId, session } = await this.checkSession(ctx);

    const text = ctx.message.text;

    if (session.category === 'init') {
      try {
        const parts = text.split(' ');
        const usdAmount = Number(parts[0]?.replace(',', '.') || 0);
        const eurAmount = Number(parts[1]?.replace(',', '.') || 0);
        const rubAmount = Number(parts[2]?.replace(',', '.') || 0);

        if (isNaN(usdAmount) || isNaN(eurAmount) || isNaN(rubAmount)) {
          await ctx.reply(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "100 200 300"',
          );
          return;
        }

        await this.sheetsService.initFinance(usdAmount, eurAmount, rubAmount);
        this.userSessions.delete(userId);
        await ctx.reply(
          '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ /add.',
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
        await ctx.reply(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets.',
        );
      }
      return;
    }

    if (!session.currency || !session.category) {
      await ctx.reply('–°–µ—Å—Å–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –Ω–∞—á–∞–ª–∞.');
      return;
    }

    const parts = text.split(' ');

    try {
      const amount = Number(parts[0].replace(',', '.'));
      const description = parts.slice(1).join(' ');

      if (isNaN(amount)) {
        await ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "100"',
        );
        return;
      }

      await this.sheetsService.addTransaction({
        currency: session.currency,
        category: session.category,
        amount: amount,
        description: description,
      });

      this.userSessions.delete(userId);
      await ctx.reply(
        '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.',
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear –¥–ª—è —Å–±—Ä–æ—Å–∞.',
      );
    }
  }

  private async checkSession(
    ctx: Context,
  ): Promise<{ userId: number; session: any } | null> {
    const userId = ctx.from.id;
    const session = this.userSessions.get(userId);

    if (!session) {
      await ctx.reply('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –Ω–∞—á–∞–ª–∞.');
      return;
    }

    return { userId, session };
  }
}
